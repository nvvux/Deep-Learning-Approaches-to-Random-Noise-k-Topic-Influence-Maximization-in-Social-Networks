import pandas as pd
from diffuse import IC
import heapq
from tqdm import tqdm
import time
# from ic_parallel_noisy import IC
def greedy_celf(filename, k):
    """
    C·∫£i ti·∫øn greedy b·∫±ng Lazy Forward (CELF) cho Multi-Topic IC.
    filename: ƒë∆∞·ªùng d·∫´n file CSV edge list v·ªõi c√°c c·ªôt source, target, weight1...weightK
    k: t·ªïng s·ªë seed c·∫ßn ch·ªçn (chia cho c√°c topic linh ho·∫°t)
    Tr·∫£ v·ªÅ: danh s√°ch seeds theo t·ª´ng topic v√† gi√° tr·ªã influence cu·ªëi c√πng
    """
    # 1. ƒê·ªçc graph v√† x√°c ƒë·ªãnh topics
    G = pd.read_csv(filename)
    weight_cols = [c for c in G.columns if c.startswith("weight")]
    K = len(weight_cols)
    nodes = set(G['source']).union(G['target'])

    # 2. C√°c c·∫•u tr√∫c l∆∞u k·∫øt qu·∫£
    seeds = [[] for _ in range(K)]
    current_spread = 0.0

    # 3. Kh·ªüi t·∫°o heap CELF: [(-gain, node, topic, last_iter)]
    heap = []
    for node in tqdm(nodes, desc="Kh·ªüi t·∫°o CELF"):
        for topic in range(K):
            # th·ª≠ ch·ªâ seed node ƒë∆°n l·∫ª tr√™n topic
            tmp_seeds = [[] for _ in range(K)]
            tmp_seeds[topic] = [node]
            spread = IC(G, tmp_seeds)
            gain = spread - current_spread
            # l∆∞u negative gain ƒë·ªÉ heapq th√†nh max-heap
            heapq.heappush(heap, (-gain, node, topic, 0))

    # 4. V√≤ng l·∫∑p ch·ªçn k seeds
    for i in range(1, k + 1):
        while True:
            # l·∫•y ph·∫ßn t·ª≠ c√≥ gain cao nh·∫•t
            neg_gain, node, topic, last_iter = heapq.heappop(heap)
            gain = -neg_gain

            if last_iter < i:
                # gain ƒë√£ l·ªói th·ªùi, t√≠nh l·∫°i
                tmp_seeds = [s.copy() for s in seeds]
                tmp_seeds[topic].append(node)
                new_spread = IC(G, tmp_seeds)
                new_gain = new_spread - current_spread
                # ƒë·∫©y l·∫°i v·ªõi last_iter = i
                heapq.heappush(heap, (-new_gain, node, topic, i))
            else:
                # gain c√≤n ƒë√∫ng, ch·ªçn node n√†y
                seeds[topic].append(node)
                current_spread += gain
                # r·ªìi tho√°t v√≤ng while ƒë·ªÉ chuy·ªÉn sang i+1
                break

    return seeds, current_spread


import pandas as pd
import time
from lazy_mp import greedy_lazy_mp  # ƒê·∫£m b·∫£o import ƒë√∫ng n·∫øu t√°ch file, n·∫øu kh√¥ng th√¨ ch·ªâ c·∫ßn d√πng tr·ª±c ti·∫øp h√†m

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description="Ch·∫°y Lazy Greedy nhi·ªÅu l·∫ßn"
    )
    parser.add_argument("--input", type=str, default="graph.csv", help="CSV source,target,weight*")
    parser.add_argument("--k", type=int, default=5, help="S·ªë seed c·∫ßn ch·ªçn")
    parser.add_argument("--mc", type=int, default=1000, help="MC simulations per estimate")
    parser.add_argument("--workers", type=int, default=None, help="S·ªë process for parallel")
    parser.add_argument("--repeat", type=int, default=10, help="S·ªë l·∫ßn ch·∫°y")
    args = parser.parse_args()

    df = pd.read_csv(args.input)

    for i in range(1, args.repeat + 1):
        start = time.time()
        seeds, spread = greedy_lazy_mp(df, args.k, mc=args.mc, n_workers=args.workers)
        elapsed = time.time() - start

        print(f"\nüü¶ L·∫ßn ch·∫°y {i}:")
        print("üïí K·∫øt qu·∫£ lazy greedy mp (CELF + MP):")
        for idx, s in enumerate(seeds, 1):
            print(f"  Ch·ªß ƒë·ªÅ {idx}: {s}")
        print(f"  ‚û§ Spread (union) = {spread:.2f}")
        print(f"  ‚è± Time = {elapsed:.3f}s")
